module Cl.Skel where

-- Haskell module generated by the BNF converter

import Cl.Abs
import Cl.ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident str  -> failure x


transId :: Id -> Result
transId x = case x of
  Qname id0 id  -> failure x


transExp :: Exp -> Result
transExp x = case x of
  Evar id  -> failure x
  Efun id  -> failure x
  Econ id  -> failure x
  Eapp exp0 exp  -> failure x


transPat :: Pat -> Result
transPat x = case x of
  Pvar id  -> failure x
  Pcon id pats  -> failure x


transGuard :: Guard -> Result
transGuard x = case x of
  Guard exps  -> failure x


transDef :: Def -> Result
transDef x = case x of
  Def pat exp  -> failure x


transLocal :: Local -> Result
transLocal x = case x of
  Loc defs  -> failure x


transClause :: Clause -> Result
transClause x = case x of
  Cl id pats guards exp locals  -> failure x


transLit :: Lit -> Result
transLit x = case x of
  Lpos exp0 exp  -> failure x
  Lneg exp0 exp  -> failure x
  Linline id  -> failure x
  Lninline id  -> failure x


transPcl :: Pcl -> Result
transPcl x = case x of
  PCl lits  -> failure x


transPropCl :: PropCl -> Result
transPropCl x = case x of
  Property id ids pcls0 pcls  -> failure x


transModule :: Module -> Result
transModule x = case x of
  Mod clauses propcls  -> failure x



