module PrintAlfa where

-- pretty-printer generated by the BNF converter

import AbsAlfa
import Char

-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: [a] -> Doc
  prtList = concatD . map (prt 0)

instance Print a => Print [a] where
  prt _ = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)



instance Print Comment where
  prt _ (Comment i) = doc (showString i)


instance Print Infix where
  prt _ (Infix i) = doc (showString i)


instance Print PIdent where
  prt _ (PIdent (_,i)) = doc (showString i)


instance Print Star where
  prt _ (Star (_,i)) = doc (showString i)


instance Print Meta where
  prt _ (Meta (_,i)) = doc (showString i)



instance Print Module where
  prt i e = case e of
   Module decls -> prPrec i 0 (concatD [prt 0 decls])


instance Print Decl where
  prt i e = case e of
   DDef defattrs def -> prPrec i 0 (concatD [prt 0 defattrs , prt 0 def])
   DImp import' -> prPrec i 0 (concatD [prt 0 import'])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ";") , prt 0 xs])

instance Print Def where
  prt i e = case e of
   Value aident vardecls exp0 exp -> prPrec i 0 (concatD [prt 0 aident , prt 0 vardecls , doc (showString "::") , prt 0 exp0 , doc (showString "=") , prt 0 exp])
   Binding aident exp -> prPrec i 0 (concatD [prt 0 aident , doc (showString "=") , prt 0 exp])
   Package aident typings packagebody -> prPrec i 0 (concatD [doc (showString "package") , prt 0 aident , prt 0 typings , doc (showString "where") , prt 0 packagebody])
   Open exp openargs -> prPrec i 0 (concatD [doc (showString "open") , prt 0 exp , doc (showString "use") , prt 0 openargs])
   Data aident typings constructors -> prPrec i 0 (concatD [doc (showString "data") , prt 0 aident , prt 0 typings , doc (showString "=") , prt 0 constructors])
   Type aident typings exp -> prPrec i 0 (concatD [doc (showString "type") , prt 0 aident , prt 0 typings , doc (showString "=") , prt 0 exp])
   Axiom aident typings exp -> prPrec i 0 (concatD [doc (showString "postulate") , prt 0 aident , prt 0 typings , doc (showString "::") , prt 0 exp])
   Mutual defs -> prPrec i 0 (concatD [doc (showString "mutual") , doc (showString "{") , prt 0 defs , doc (showString "}")])
   Commt comment -> prPrec i 0 (concatD [prt 0 comment])
   Class tysig tysigs -> prPrec i 0 (concatD [doc (showString "class") , prt 0 tysig , doc (showString "exports") , doc (showString "{") , prt 0 tysigs , doc (showString "}")])
   Inst tysig bindings -> prPrec i 0 (concatD [doc (showString "instance") , prt 0 tysig , doc (showString "where") , doc (showString "{") , prt 0 bindings , doc (showString "}")])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ";") , prt 0 xs])

instance Print TySig where
  prt i e = case e of
   TySig aident vardecls exp -> prPrec i 0 (concatD [prt 0 aident , prt 0 vardecls , doc (showString "::") , prt 0 exp])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ";") , prt 0 xs])

instance Print Import where
  prt i e = case e of
   Import str -> prPrec i 0 (concatD [doc (showString "import") , prt 0 str , doc (showString ";")])


instance Print Exp where
  prt i e = case e of
   EVar aident -> prPrec i 4 (concatD [prt 0 aident])
   ECon aident -> prPrec i 4 (concatD [prt 0 aident , doc (showString "@_")])
   ESet  -> prPrec i 4 (concatD [doc (showString "Set")])
   EType  -> prPrec i 4 (concatD [doc (showString "Type")])
   EMeta meta -> prPrec i 4 (concatD [prt 0 meta])
   EMetaU  -> prPrec i 4 (concatD [doc (showString "_")])
   EStar star -> prPrec i 4 (concatD [prt 0 star])
   EString str -> prPrec i 4 (concatD [prt 0 str])
   EChar c -> prPrec i 4 (concatD [prt 0 c])
   EInt n -> prPrec i 4 (concatD [prt 0 n])
   EDouble d -> prPrec i 4 (concatD [prt 0 d])
   EProj exp aident -> prPrec i 3 (concatD [prt 3 exp , doc (showString ".") , prt 0 aident])
   EApp exp0 exp -> prPrec i 1 (concatD [prt 1 exp0 , prt 2 exp])
   EAppHid exp0 exp -> prPrec i 1 (concatD [prt 1 exp0 , doc (showString "|") , prt 2 exp])
   EInfix exp0 infix' exp -> prPrec i 0 (concatD [prt 1 exp0 , prt 0 infix' , prt 1 exp])
   ESig fielddecls -> prPrec i 1 (concatD [doc (showString "sig") , doc (showString "{") , prt 0 fielddecls , doc (showString "}")])
   EStr bindings -> prPrec i 1 (concatD [doc (showString "struct") , doc (showString "{") , prt 0 bindings , doc (showString "}")])
   ESum constructors -> prPrec i 0 (concatD [doc (showString "data") , prt 0 constructors])
   EPi vardecl arrow exp -> prPrec i 0 (concatD [prt 0 vardecl , prt 0 arrow , prt 0 exp])
   EFun exp0 arrow exp -> prPrec i 0 (concatD [prt 1 exp0 , prt 0 arrow , prt 0 exp])
   EAbs vardecl arrow exp -> prPrec i 0 (concatD [doc (showString "\\") , prt 0 vardecl , prt 0 arrow , prt 0 exp])
   EAbsUnt aidents arrow exp -> prPrec i 0 (concatD [doc (showString "\\") , prt 0 aidents , prt 0 arrow , prt 0 exp])
   ELet decls exp -> prPrec i 0 (concatD [doc (showString "let") , doc (showString "{") , prt 0 decls , doc (showString "}") , doc (showString "in") , prt 0 exp])
   EOpen exp0 openargs exp -> prPrec i 0 (concatD [doc (showString "open") , prt 0 exp0 , doc (showString "use") , prt 0 openargs , doc (showString "in") , prt 0 exp])
   ECase exp branchs -> prPrec i 0 (concatD [doc (showString "case") , prt 0 exp , doc (showString "of") , doc (showString "{") , prt 0 branchs , doc (showString "}")])
   EIData vardecls indconstructors -> prPrec i 0 (concatD [doc (showString "idata") , prt 0 vardecls , prt 0 indconstructors])
   ECommL comment exp -> prPrec i 0 (concatD [prt 0 comment , prt 1 exp])
   ECommR exp comment -> prPrec i 0 (concatD [prt 1 exp , prt 0 comment])
   EConst aident -> prPrec i 4 (concatD [prt 0 aident])
   EMetaN n -> prPrec i 4 (concatD [doc (showString "?") , prt 0 n])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 2 x , prt 2 xs])

instance Print Arrow where
  prt i e = case e of
   AShow  -> prPrec i 0 (concatD [doc (showString "->")])
   AHide  -> prPrec i 0 (concatD [doc (showString "|->")])


instance Print Typing where
  prt i e = case e of
   TDecl vardecl -> prPrec i 0 (concatD [prt 0 vardecl])
   TExp exp -> prPrec i 0 (concatD [prt 2 exp])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print VarDecl where
  prt i e = case e of
   VDecl bounds exp -> prPrec i 0 (concatD [doc (showString "(") , prt 0 bounds , doc (showString "::") , prt 0 exp , doc (showString ")")])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print Bound where
  prt i e = case e of
   BVar aident -> prPrec i 0 (concatD [prt 0 aident])
   BHide aident -> prPrec i 0 (concatD [doc (showString "|") , prt 0 aident])

  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print FieldDecl where
  prt i e = case e of
   FDecl aident exp -> prPrec i 0 (concatD [prt 0 aident , doc (showString "::") , prt 0 exp])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ";") , prt 0 xs])

instance Print Branch where
  prt i e = case e of
   BranchCon aident aidents exp -> prPrec i 0 (concatD [doc (showString "(") , prt 0 aident , prt 0 aidents , doc (showString ")") , doc (showString "->") , prt 0 exp])
   BranchInf aident0 infix' aident exp -> prPrec i 0 (concatD [doc (showString "(") , prt 0 aident0 , prt 0 infix' , prt 0 aident , doc (showString ")") , doc (showString "->") , prt 0 exp])
   BranchVar aident exp -> prPrec i 0 (concatD [prt 0 aident , doc (showString "->") , prt 0 exp])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ";") , prt 0 xs])

instance Print Constructor where
  prt i e = case e of
   Cnstr aident typings -> prPrec i 0 (concatD [prt 0 aident , prt 0 typings])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString "|") , prt 0 xs])

instance Print IndConstructor where
  prt i e = case e of
   ICnstr aident typings exps -> prPrec i 0 (concatD [prt 0 aident , prt 0 typings , doc (showString "::") , doc (showString "_") , prt 2 exps])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString "|") , prt 0 xs])

instance Print Binding where
  prt i e = case e of
   Bind aident exp -> prPrec i 0 (concatD [prt 0 aident , doc (showString "=") , prt 0 exp])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ";") , prt 0 xs])

instance Print PackageBody where
  prt i e = case e of
   PackageDef decls -> prPrec i 0 (concatD [doc (showString "{") , prt 0 decls , doc (showString "}")])
   PackageInst exp -> prPrec i 0 (concatD [prt 0 exp])


instance Print OpenArg where
  prt i e = case e of
   OArg defattrs aident -> prPrec i 0 (concatD [prt 0 defattrs , prt 0 aident])
   OArgT defattrs aident exp -> prPrec i 0 (concatD [prt 0 defattrs , prt 0 aident , doc (showString "::") , prt 0 exp])
   OArgD defattrs aident exp -> prPrec i 0 (concatD [prt 0 defattrs , prt 0 aident , doc (showString "=") , prt 0 exp])
   OArgTD defattrs aident exp0 exp -> prPrec i 0 (concatD [prt 0 defattrs , prt 0 aident , doc (showString "::") , prt 0 exp0 , doc (showString "=") , prt 0 exp])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print DefAttr where
  prt i e = case e of
   Private  -> prPrec i 0 (concatD [doc (showString "private")])
   Public  -> prPrec i 0 (concatD [doc (showString "public")])
   Abstract  -> prPrec i 0 (concatD [doc (showString "abstract")])
   Concrete  -> prPrec i 0 (concatD [doc (showString "concrete")])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print AIdent where
  prt i e = case e of
   I infix' -> prPrec i 0 (concatD [doc (showString "(") , prt 0 infix' , doc (showString ")")])
   F pident -> prPrec i 0 (concatD [prt 0 pident])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , prt 0 xs])


